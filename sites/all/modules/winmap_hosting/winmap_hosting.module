<?php


/* Load configs
 *
 * */
include(DRUPAL_ROOT . "/sites/all/modules/winmap_hosting/winmap_hosting.config.php");
/* Load utilities
 *
 * */
include(DRUPAL_ROOT . "/sites/all/modules/winmap_hosting/winmap_hosting.utilities.php");



function winmap_hosting_init()
{

}


/**
 * Implements hook_menu()
 */
function winmap_hosting_menu()
{
  $items = array();
  //list hosting manager
  $items['admin/hostings'] = array(
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'winmap_hosting_page_callback',
    'title' => 'Danh sách hosting',
    'access arguments' => array('winmap_hosting module'),
    'weight' => 1,
    'file' => 'winmap_hosting.inc',
  );
  //create new hosting
  $items['admin/hostings/create'] = array(
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'winmap_admin_hosting_create_page',
    'title' => 'Thêm hosting mới',
    'access arguments' => array('winmap_hosting module'),
    'weight' => 2,
    'file' => 'winmap_hosting.inc',
  );
  //edit hosting
  $items['admin/hosting/%hosting/edit'] = array(
    'title' => 'Edit Host',
    'page callback' => 'winmap_admin_hosting_edit_page',
    'page arguments' => array(2), // '2' lấy tham số thứ hai từ URL (ID)
    'access arguments' => array('winmap_hosting module'),
    'file' => 'winmap_hosting.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function winmap_hosting_theme($existing, $type, $theme, $path)
{
  return array(
    'winmap_hosting_form' => array(
      'render element' => 'form',
      'template' => 'winmap_hosting_form',
      'path' => drupal_get_path('module', 'winmap_hosting') . '/templates/forms/admin',
    ),

  );
}

/**
 * Implements hook_permission().
 */
function winmap_hosting_permission()
{
  return array(
    'winmap_hosting module' => array(
      'title' => t('winmap_hosting module'),
      'description' => t('Access for winmap_hosting module'),
    )
  );
}

function winmap_hosting_get_items_all() {
  $sql = "SELECT * FROM winmap_hostings ORDER BY id ASC";
  $result = db_query($sql)->fetchAll();
  return $result;
}


/**
 * Load.
 */
function hosting_load($hostingId)
{
  $hosting = null;
  try {
    $result = db_select('winmap_hostings', 'wh')
      ->fields('wh')
      ->condition('id', $hostingId, '=')
      ->execute()
      ->fetchObject();

    // Kiểm tra nếu không tìm thấy bản ghi.
    if (!empty($result)) {
      $hosting = $result;
    }

  } catch (Exception $e) {

  }
  return $hosting;
}


/**
 * Last changed.
 */
function winmap_hosting_last_changed ($hostingId) {
  $changed = db_query('SELECT changed FROM {winmap_hostings} WHERE id = :id', array(':id' => $hostingId))->fetch()->changed;
  if (empty($changed)) {
    $changed = 0;
  }
  return $changed;
}

/**
 * Save.
 */

function hosting_save($hosting)
{
  global $user;
  $op = null;
  $transaction = db_transaction();
  $hosting_old = $hosting;
  if (is_array($hosting)) {
    $hosting = (object)$hosting;
  }
  if (empty($hosting->id)) {
    $op = 'insert';
  }else {
    $op = 'update';
  }

  $saved = null;
  try {
    module_invoke_all('winmap_hosting_presave', $hosting, $op);
    if ($op == 'insert') {
      $hosting->created = $hosting->changed = REQUEST_TIME;
      $hosting->uid = $user->uid;
      $saved = drupal_write_record('winmap_hostings', $hosting);
      module_invoke_all('winmap_hosting_insert', $hosting);
    } elseif($op == 'update') {
      $old =  winmap_hosting_load($hosting->id);
      $saved = drupal_write_record('winmap_hostings', $hosting, array('id'));
      $revisions = $hosting;
      $revisions->hostingId = $hosting->id;
      $revisions->createBy = $user->uid;
      $revisions->posted = REQUEST_TIME;
      unset($revisions->id);
      $revisions->oldData = json_encode($old);
      drupal_write_record('winmap_hosting_revisions', $revisions);
      module_invoke_all('winmap_hosting_update', $hosting);
    }
  } catch (Exception $e) {
    $transaction->rollback();
  }
  return $saved;
}

/* Load forms
 *
 *
 * */
include(DRUPAL_ROOT . "/sites/all/modules/winmap_hosting/winmap_hosting.forms.php");


///
function winmap_hosting_load($hostingId) {
  $result = db_select('winmap_hostings', 'wh')
    ->fields('wh')
    ->condition('id', $hostingId, '=')
    ->execute()
    ->fetchObject();
  if ($result) {
    return $result;
  }
  else {
    return FALSE;
  }
}

function winmap_ssh_connection($ip, $username, $password){
  $port = 22;
  if (!function_exists('ssh2_connect')) {
    return 'Module SSH2 chưa được cài đặt trong PHP.';
  }
  $connection = ssh2_connect($ip, $port);
  if (!$connection) {
    return 'Không thể kết nối đến máy chủ SSH. Vui lòng kiểm tra lại địa chỉ IP.';
  }
  if (!ssh2_auth_password($connection, $username, $password)) {
    return 'Xác thực SSH không thành công. Vui lòng kiểm tra lại thông tin đăng nhập.';
  }
  return $connection;
}

function winmap_ssh_close(&$connect) {
  if (isset($connect)) {
    ssh2_disconnect($connect);
    return TRUE;
  }
  return FALSE; // Kết nối không hợp lệ hoặc đã được đóng trước đó
}

// Hàm đăng nhập SSH
function winmap_ssh_login($connection, $username, $password)
{
  if (!ssh2_auth_password($connection, $username, $password)) {
    return 'Xác thực SSH không thành công. Vui lòng kiểm tra lại thông tin đăng nhập.';
  }
  return true;
}

//Lấy về web id trên plesk panel
function winmap_get_webspace_by_domain($host, $username, $password, $domainName) {
  $plesk_host = 'https://' . $host . ':8443';
  $url = "https://$host:8443/enterprise/control/agent.php";

  $xml_data = <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<packet>
  <site>
    <get>
       <filter>
            <name>$domainName</name>
       </filter>
       <dataset>
            <gen_info/>
       </dataset>
    </get>
  </site>
</packet>
XML;

  // Khởi tạo cURL
  $ch = curl_init();

  // Thiết lập các tùy chọn cURL
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml_data);
  curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: text/xml',
    'HTTP_PRETTY_PRINT: TRUE',
    'HTTP_AUTH_LOGIN: '.$username,
    'HTTP_AUTH_PASSWD:'.$password
  ]);

  $response = curl_exec($ch);
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

  if (curl_errno($ch)) {
    echo 'cURL Error: ' . curl_error($ch);
  } elseif ($httpcode == 200) {
    $xml = simplexml_load_string($response);

    if (isset($xml->site->get->result->data->gen_info)) {
      $webspace_id  = (string)$xml->site->get->result->data->gen_info->{'webspace-id'};
      return $webspace_id;
    } else {
      echo "Webspace ID not found in the response.";
      return null;
    }
  } else {
    echo "Failed to get webspace ID. HTTP Code: $httpcode. Response: $response";
    return null;
  }
  // Đóng cURL
  curl_close($ch);
  return true;
}

//Tạo database thông qua plesk api
function winmap_create_database_by_plesk_api($host,$pleskUser,$pleskPass,$databaseName,$mysqlUser,$mysqlPass,$domain){
  $url = "https://$host:8443/enterprise/control/agent.php";
  $webspaceId = winmap_get_webspace_by_domain($host,$pleskUser,$pleskPass,$domain);
  $xml_data = <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<packet>
  <database>
    <add-db>
      <webspace-id>$webspaceId</webspace-id>
      <name>$databaseName</name>
      <type>mysql</type>
    </add-db>
  </database>
</packet>
XML;

  $ch = curl_init();

  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml_data);
  curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: text/xml',
    'HTTP_PRETTY_PRINT: TRUE',
    'HTTP_AUTH_LOGIN: '.$pleskUser,
    'HTTP_AUTH_PASSWD:'.$pleskPass
  ]);

  $response = curl_exec($ch);
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

  if (curl_errno($ch)) {
    echo 'cURL Error: ' . curl_error($ch);
  } elseif ($httpcode == 200) {
    echo "Database created successfully. Response: $response";
    return TRUE;
  } else {
    echo "Failed to create database. HTTP Code: $httpcode. Response: $response";
    return FALSE;
  }

  curl_close($ch);
  return TRUE;
}

function winmap_ssh_sql_create_db($connect, $dbName, $dbUser, $dbPass, $domain) {
  if (!$connect) {
    return 'Không có kết nối SSH hợp lệ.';
  }
  if (isset($connect)) {

    $commands = [
      "CREATE DATABASE `$dbName`;",
      "CREATE USER `$dbUser`@'%' IDENTIFIED BY '$dbPass';",
      "GRANT ALL PRIVILEGES ON `$dbName`.* TO `$dbUser`@'%';",
      "FLUSH PRIVILEGES;"
    ];
    $command = implode(" ", $commands);
    if (!ssh2_exec($connect, "mysql -u root -p '' -e \"$command\"")) {
      return 'Không thể thực thi lệnh SQL để tạo database. Vui lòng kiểm tra quyền truy cập và cấu hình.';
    }
    watchdog('winmap_ssh_sql_create_db', 'Database @dbname được khởi tạo thành công cho domain @domain',
      array('@dbname' => $dbName, '@domain' => $domain), WATCHDOG_NOTICE);
    return TRUE;
  }

  watchdog('winmap_ssh_sql_create_db', 'Kết nối SSH không hợp lệ được cung cấp để tạo cơ sở dữ liệu.', array(), WATCHDOG_ERROR);
  return FALSE;
}

//login ssh and import database
function winmap_ssh_sql_import_db($connect, $dbName, $dbUser, $dbPass, $path) {
  if (!$connect) {
    return 'Không có kết nối SSH hợp lệ.';
  }

  // Kiểm tra tệp SQL trên máy chủ từ xa qua SSH
  $checkFileCommand = "test -f $path && echo 'exists' || echo 'not exists'";
  $stream = ssh2_exec($connect, $checkFileCommand);
  stream_set_blocking($stream, true);
  $fileCheckOutput = stream_get_contents($stream);
  fclose($stream);

  if (trim($fileCheckOutput) !== 'exists') {
    return 'File SQL không tồn tại trên máy chủ từ xa. Vui lòng kiểm tra lại đường dẫn file.';
  }

  // Thực thi lệnh import qua SSH
  $command = "mysql -u $dbUser -p$dbPass $dbName < $path";
  $stream = ssh2_exec($connect, $command);
  $errorStream = ssh2_fetch_stream($stream, SSH2_STREAM_STDERR); // Lấy luồng lỗi
  stream_set_blocking($stream, true);
  stream_set_blocking($errorStream, true);

  $output = stream_get_contents($stream);
  $errorOutput = stream_get_contents($errorStream); // Lấy thông báo lỗi
  fclose($stream);
  fclose($errorStream);

  if ($errorOutput) {
    watchdog('winmap_ssh_sql_import_db', 'Không thể nhập cơ sở dữ liệu: @dbname từ file: @path. Error: @error', [
      '@dbname' => $dbName,
      '@path' => $path,
      '@error' => $errorOutput
    ], WATCHDOG_ERROR);
    return FALSE;
  }

  // Thực hiện truy vấn kiểm tra số lượng bảng sau khi import
  $checkTablesCommand = "mysql -u $dbUser -p$dbPass -e 'SHOW TABLES;' $dbName";
  $stream = ssh2_exec($connect, $checkTablesCommand);
  stream_set_blocking($stream, true);
  $tablesOutput = stream_get_contents($stream);
  fclose($stream);

  if (empty($tablesOutput)) {
    watchdog('winmap_ssh_sql_import_db', 'Import hoàn thành nhưng không có bảng nào được tạo trong cơ sở dữ liệu @dbname.', [
      '@dbname' => $dbName,
      '@path' => $path
    ], WATCHDOG_WARNING);
    return FALSE;
  }

  watchdog('winmap_ssh_sql_import_db', 'Database @dbname đã nhập thành công từ file: @path', [
    '@dbname' => $dbName,
    '@path' => $path
  ], WATCHDOG_NOTICE);
  return TRUE; // Import thành công
}

function winmap_ssh_create_domain($host, $domain, $ip, $username, $password) {
//  $host = 'https://103.179.190.104:8443';
  $plesk_host = 'https://'.$host.':8443';
  $api_token = ''; //token access api plesk
  $url = $plesk_host . "/api/v2/domains";

  $data = [
    "name" => $domain,
    "ipAddresses" => [$ip],
    "hosting_type" => "virtual",
    "login" => $username,
    "password" => $password,
  ];

  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_HTTPHEADER, [
    "Authorization: Bearer $api_token",
    "Content-Type: application/json",
  ]);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));

  $response = curl_exec($ch);
  $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  curl_close($ch);

  if ($httpCode == 201) {
    return t("Domain created successfully: @domain_name", ['@domain_name' => $domain]);
  } else {
    watchdog('plesk_domain_module', 'Failed to create domain. Response: @response', ['@response' => $response], WATCHDOG_ERROR);
    return t("Failed to create domain. Please check the logs for more details.");
  }

}

//create database using plesk api
function winmap_create_plesk_api_token($host, $username, $password) {
  // URL đến API để tạo khóa xác thực
  $url = "https://$host:8443/api/v2/auth/keys";

  // Dữ liệu JSON gửi trong body của yêu cầu
  $data = [
    'name' => 'apiToken',
    'ipAddresses' => [$host],
  ];
  $json_data = json_encode($data);

  // Khởi tạo cURL
  $ch = curl_init();

  // Thiết lập các tùy chọn cURL
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_USERPWD, "$username:$password");
  curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: application/json',
    'Accept: application/json'
  ]);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $json_data);

  $response = curl_exec($ch);
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

  if (curl_errno($ch)) {
    echo 'cURL Error: ' . curl_error($ch);
  } elseif ($httpcode == 201) {
    $data = json_decode($response);
    return $data->key;
  } else {
    echo "Failed to create authentication key. HTTP Code: $httpcode. Response: $response";
  }
  // Đóng cURL
  curl_close($ch);
  return TRUE;
}

//tạo subdomain thông qua plesk api
function winmap_ssh_create_sub_domain($ipHost, $pleskUser, $pleskPass, $subdomain, $parentDomain,$domainPath){
  //username, password phải là tài khoản admin cao nhất của plesk
  $url = "https://$ipHost:8443/enterprise/control/agent.php";
  $xml_data = <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<packet>
  <subdomain>
    <add>
      <parent>$parentDomain</parent>
      <name>$subdomain</name>
      <property>
        <name>www_root</name>
        <value>$domainPath</value>
      </property>
    </add>
  </subdomain>
</packet>
XML;

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $xml_data);
  curl_setopt($ch, CURLOPT_HTTPHEADER, [
    'Content-Type: text/xml',
    'HTTP_PRETTY_PRINT: TRUE',
    'HTTP_AUTH_LOGIN: '.$pleskUser,
    'HTTP_AUTH_PASSWD:'.$pleskPass
  ]);

  $response = curl_exec($ch);
  $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

  if (curl_errno($ch)) {
    echo 'cURL Error: ' . curl_error($ch);
  } elseif ($httpcode == 201) {
    echo "Subdomain created successfully: $response";
  } else {
    echo "Failed to create subdomain. HTTP Code: $httpcode. Response: $response";
    return FALSE;
  }
  curl_close($ch);
  return true;
}

function winmap_ssh_create_folder($connect, $folderName, $path) {
  // Kiểm tra kết nối SSH
  if (!$connect) {
    watchdog('winmap_ssh_create_folder', 'Không kết nối được với SSH.', array(), WATCHDOG_ERROR);
    return false;
  }
  // Tạo đường dẫn đầy đủ cho thư mục mới
  $fullPath = rtrim($path, '/') . '/' . trim($folderName, '/');
// Command to create the directory
  $command = "mkdir -p " . escapeshellarg($fullPath);
  $stream = ssh2_exec($connect, $command);
  if (!$stream) {
    watchdog('winmap_ssh_create_folder', 'Không thể thực hiện lệnh qua SSH.', array(), WATCHDOG_ERROR);
    return false;
  }

  stream_set_blocking($stream, true);
  $output = stream_get_contents($stream);
  $errorStream = ssh2_fetch_stream($stream, SSH2_STREAM_STDERR);
  stream_set_blocking($errorStream, true);
  $errorOutput = stream_get_contents($errorStream);

  fclose($stream);
  fclose($errorStream);

  if (empty($errorOutput)) {
    watchdog('winmap_ssh_create_folder', 'Thư mục @folder được tạo thành công với đường dẫn @path.', array('@folder' => $folderName, '@path' => $fullPath), WATCHDOG_NOTICE);
    return true;
  } else {
    watchdog('winmap_ssh_create_folder', 'Lỗi tạo thư mục @folder tại @path: @error', array('@folder' => $folderName, '@path' => $fullPath, '@error' => $errorOutput), WATCHDOG_ERROR);
    return false;
  }
}
//copy file and folder
function winmap_clone_file_and_folder($connect,$localDirectory, $remoteDirectory){
  if (!$connect) {
    watchdog('winmap_ssh_copy_file_folder', 'Không kết nối được với SSH.', array(), WATCHDOG_ERROR);
    return false;
  }
  // Kiểm tra nếu thư mục cục bộ tồn tại
  if (!is_dir($localDirectory)) {
    watchdog('winmap_ssh_copy_all', 'Thư mục cục bộ không tồn tại: @localDirectory', array('@localDirectory' => $localDirectory), WATCHDOG_ERROR);
    return false;
  }
  // Duyệt qua tất cả các mục trong thư mục cục bộ
  $items = scandir($localDirectory);
  foreach ($items as $item) {
    if ($item == '.' || $item == '..') continue; // Bỏ qua các thư mục đặc biệt

    $localPath = $localDirectory . '/' . $item;
    $remotePath = rtrim($remoteDirectory, '/') . '/' . $item;

    if (is_dir($localPath)) {
      // Tạo thư mục trên máy từ xa
      $command = "mkdir -p " . escapeshellarg($remotePath);
      $stream = ssh2_exec($connect, $command);
      stream_set_blocking($stream, true);
      fclose($stream);

      // Sao chép đệ quy các tệp trong thư mục con
      winmap_clone_file_and_folder($connect,$localDirectory, $remoteDirectory);
    } else {
      // Sao chép tệp đơn lẻ
      if (!ssh2_scp_send($connect, $localPath, $remotePath)) {
        watchdog('winmap_ssh_copy_all', 'Lỗi khi sao chép tệp @file vào @remotePath.', array('@file' => $localPath, '@remotePath' => $remotePath), WATCHDOG_ERROR);
        return false;
      } else {
        watchdog('winmap_ssh_copy_all', 'Tệp @file đã được sao chép vào @remotePath.', array('@file' => $localPath, '@remotePath' => $remotePath), WATCHDOG_NOTICE);
      }
    }
  }
  return true;
}

//edit file
function winmap_edit_file($connect,$filePath,$linesToEdit){
  if (!$connect) {
    watchdog('winmap_ssh_copy_file_folder', 'Không kết nối được với SSH.', array(), WATCHDOG_ERROR);
    return false;
  }
// Đọc nội dung file từ máy chủ
  $stream = ssh2_exec($connect, "cat " . escapeshellarg($filePath));
  stream_set_blocking($stream, true);
  $content = stream_get_contents($stream);
  fclose($stream);

  // Chia nội dung thành các dòng
  $lines = explode("\n", $content);
  // Chỉnh sửa các dòng dựa trên mảng $linesToEdit
  foreach ($linesToEdit as $lineToEditIndex => $newLineContent) {
    // Kiểm tra nếu chỉ mục tồn tại
    if (isset($lines[$lineToEditIndex])) {
      $lines[$lineToEditIndex] = $newLineContent; // Cập nhật dòng
    }
  }

  // Kết hợp lại nội dung đã sửa thành một chuỗi
  $newContent = implode("\n", $lines);

  // Tạo một file tạm thời trên máy cục bộ
  $localTempFilePath = tempnam(sys_get_temp_dir(), 'tempfile_');
  file_put_contents($localTempFilePath, $newContent);

  // Sử dụng scp để chuyển file tạm thời đến máy chủ
  $remoteFilePath = $filePath;
  if (ssh2_scp_send($connect, $localTempFilePath, $remoteFilePath)) {
    echo "Lưu thành công!";
    // Xóa file tạm thời
    unlink($localTempFilePath);
    return true;
  } else {
    echo "Lỗi khi chuyển file.";
    return false;
  }

}

function winmap_ssh_upload_file($connect, $fileName, $path) {

  if (!$connect) {
    watchdog('winmap_ssh_upload_file', 'Kết nối SSH không được thiết lập.', array(), WATCHDOG_ERROR);
    return false;
  }

  // Kiểm tra xem file có tồn tại không
  if (!file_exists($fileName)) {
    watchdog('winmap_ssh_upload_file', 'File @file không tồn tại.', array('@file' => $fileName), WATCHDOG_ERROR);
    return false;
  }

  // Đường dẫn đầy đủ trên máy chủ
  $remotePath = rtrim($path, '/') . '/' . basename($fileName);

  // Upload file
  if (ssh2_scp_send($connect, $fileName, $remotePath)) {
    watchdog('winmap_ssh_upload_file', 'File @file tải lên thành công @path.', array('@file' => $fileName, '@path' => $remotePath), WATCHDOG_NOTICE);
    return true;
  } else {
    watchdog('winmap_ssh_upload_file', 'Không tải được file @file đến @path.', array('@file' => $fileName, '@path' => $remotePath), WATCHDOG_ERROR);
    return false;
  }
}


function winmap_ftp_connect($ftp_server, $ftp_port, $ftp_user, $ftp_pass) {
  // Kết nối tới FTP server.
  $ftp_conn = ftp_connect($ftp_server, $ftp_port);
  // Kiểm tra kết nối.
  if ($ftp_conn === false) {
    watchdog('winmap_hosting', 'Could not connect to FTP server @server: @port', array('@server' => $ftp_server, '@port' => $ftp_port), WATCHDOG_ERROR);
    return array('success'=>false);
  }
  // Đăng nhập vào FTP server.
  $login = ftp_login($ftp_conn, $ftp_user, $ftp_pass);
  // Kiểm tra đăng nhập.
  if ($login === false) {
    ftp_close($ftp_conn);
    watchdog('winmap_hosting', 'Could not log in to FTP server with username: @user', array('@user' => $ftp_user), WATCHDOG_ERROR);
    return array('success'=>false);
  }

  // Trả về kết nối thành công.
  return $ftp_conn;
}

function winmap_ftp_close($connect) {
  if (!$connect) {
    watchdog('winmap_ftp_close', 'Không có kết nối FTP hợp lệ nào để đóng.', array(), WATCHDOG_WARNING);
    return false;
  }
  // Đóng kết nối FTP
  if (ftp_close($connect)) {
    watchdog('winmap_ftp_close', 'Kết nối FTP đã đóng thành công.', array(), WATCHDOG_NOTICE);
    return true;
  } else {
    watchdog('winmap_ftp_close', 'Không thể đóng kết nối FTP.', array(), WATCHDOG_ERROR);
    return false;
  }
}

function winmap_ftp_login($connect, $username, $password) {
  // Kiểm tra kết nối FTP
  if (!$connect) {
    watchdog('winmap_ftp_login', 'Không có kết nối FTP hợp lệ để đăng nhập.', array(), WATCHDOG_ERROR);
    return false;
  }

  // Thực hiện đăng nhập
  if (ftp_login($connect, $username, $password)) {
    watchdog('winmap_ftp_login', 'Đã đăng nhập vào máy chủ FTP với tư cách là @user.', array('@user' => $username), WATCHDOG_NOTICE);
    return true;
  } else {
    watchdog('winmap_ftp_login', 'Không thể đăng nhập vào máy chủ FTP as @user.', array('@user' => $username), WATCHDOG_ERROR);
    return false;
  }
}

//Create folder sử dụng tài khoản ftp
function winmap_ftp_create_folder($connect, $folderName, $path) {
  // Kiểm tra kết nối FTP
  if (!$connect) {
    watchdog('winmap_ftp_create_folder', 'No valid FTP connection to create folder.', array(), WATCHDOG_ERROR);
    return false;
  }

  // Tạo đường dẫn đầy đủ cho thư mục
  $fullPath = rtrim($path, '/') . '/' . trim($folderName, '/');

  // Tạo thư mục trên server FTP
  if (ftp_mkdir($connect, $fullPath)) {
    watchdog('winmap_ftp_create_folder', 'Thư mục @folder tạo thành công tại đường dẫn @path.', array('@folder' => $folderName, '@path' => $fullPath), WATCHDOG_NOTICE);
    return true;
  } else {
    watchdog('winmap_ftp_create_folder', 'Lỗi tạo thư mục @folder với đường dẫn @path.', array('@folder' => $folderName, '@path' => $fullPath), WATCHDOG_ERROR);
    return false;
  }
}

function winmap_ftp_upload_file($connect, $fileName, $path) {
  // Kiểm tra kết nối FTP
  if (!$connect) {
    watchdog('winmap_ftp_upload_file', 'Không có kết nối FTP hợp lệ để tải tệp lên.', array(), WATCHDOG_ERROR);
    return false;
  }

  // Kiểm tra xem file có tồn tại không
  if (!file_exists($fileName)) {
    watchdog('winmap_ftp_upload_file', 'File @file không tồn tại', array('@file' => $fileName), WATCHDOG_ERROR);
    return false;
  }

  // Upload file lên server FTP
  if (ftp_put($connect, $path, $fileName, FTP_BINARY)) {
    watchdog('winmap_ftp_upload_file', 'File @file tải lên thành công tại @path.', array('@file' => $fileName, '@path' => $path), WATCHDOG_NOTICE);
    return true;
  } else {
    watchdog('winmap_ftp_upload_file', 'Lỗi tải @file tại @path.', array('@file' => $fileName, '@path' => $path), WATCHDOG_ERROR);
    return false;
  }
}



function winmap_create_dns_domain($domainName, $ip,$cloudflareToken,$cloudflareZoneId) {
  //domainName là tên bản ghi
//  $cloudflareToken ="BX4I60roVBRRA9fnsrUSRceLd2-EV-ocp42DO1Cs";
//  $zoneId = "a5afe68ad6dac7fb25a328548d6c37ec";
  $apiUrl = "https://api.cloudflare.com/client/v4/zones/".$cloudflareZoneId."/dns_records";

  // Dữ liệu gửi đi cho bản ghi DNS
  $data = array(
    'type' => 'A',               // Loại bản ghi (A Record)
    'name' => $domainName,       // Tên domain
    'content' => $ip,            // Địa chỉ IP trỏ tới
    'ttl' => 3600,               // Thời gian TTL (giây)
    'proxied' => false           // Không bật proxy Cloudflare
  );

  // Khởi tạo cURL
  $ch = curl_init($apiUrl);

  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Content-Type: application/json',
    'Authorization: Bearer ' . $cloudflareToken
  ));

  // Thực hiện yêu cầu
  $response = curl_exec($ch);

  // Kiểm tra lỗi cURL
  if (curl_errno($ch)) {
    watchdog('winmap_dns_create_domain', 'Curl error: @error', array('@error' => curl_error($ch)), WATCHDOG_ERROR);
    curl_close($ch);
    return false;
  }

  // Đóng cURL
  curl_close($ch);

  $result = json_decode($response, true);

  // Kiểm tra kết quả
  if (isset($result['success']) && $result['success'] === true) {
    watchdog('winmap_dns_create_domain', 'Bản ghi DNS cho @domain tạo thành công cho IP @ip.', array('@domain' => $domainName, '@ip' => $ip), WATCHDOG_NOTICE);
    return true;
  } else {
    $errorMessage = isset($result['errors'][0]['message']) ? $result['errors'][0]['message'] : 'Unknown error';
    watchdog('winmap_dns_create_domain', 'Không tạo được bản ghi DNS cho tên miền @domain: @error', array('@domain' => $domainName, '@error' => $errorMessage), WATCHDOG_ERROR);
    return false;
  }
}
